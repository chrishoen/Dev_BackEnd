#pragma once
/*==============================================================================
Export definitions for the backed DLL. 
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************

#include <functional>
#include <string>

#ifdef __cplusplus
extern "C" {
#endif
  
namespace BackEnd
{
//******************************************************************************
//******************************************************************************
//******************************************************************************
// Initialize the dll. Read a settings file, initialize resources, and
// launch threads. This must be called before any other functions in
// the dll can be called. Return true if successful.
// 

bool  initializeBackEnd();

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Finalize  the dll. Finalize resources and terminate threads. This
// must be called before the process termination section force
// terminates any running threads. Return true if successful.

bool  finalizeBackEnd();

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Get the current status.

int  getBackEndStatus();


//******************************************************************************
//******************************************************************************
//******************************************************************************
// Set a string. Delete the string after processing it.

void setMyString(std::string* aString);

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Create a new string and return it. The caller must delete it after
// processing it.

void getMyString(std::string*& aString);

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Get the current count.

int getCount();
void setCount(int aCount);
void sleep(int aTicks);

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Register a callback for the timer.

void setTimerCallback(std::function<void(int)> aCallback);
void resetTimerCallback();

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Invoke command1.

void doCommand1(std::string* aArg0,std::function<void(int,std::string*)> aCompletionCallback);

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace 

#ifdef __cplusplus
}
#endif

