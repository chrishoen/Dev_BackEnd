#pragma once

/*==============================================================================
Timer thead example
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************
#include <functional>

#include "risThreadsTimerThread.h"

namespace BackEnd
{
//******************************************************************************
//******************************************************************************
//******************************************************************************

class InterfaceThread : public Ris::Threads::BaseTimerThread
{
public:
   typedef Ris::Threads::BaseTimerThread BaseClass;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Members.

   bool mTPFlag;

   // Timer callback.
   bool mTimerCallbackFlag;
   std::function<void(int)> mTimerCallback;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Methods.

   // Constructor.
   InterfaceThread();

   // Base class overloads.
   void threadInitFunction() override;
   void threadExitFunction() override;
   void executeOnTimer(int aTimeCount) override;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Methods.

   void setTimerCallback(std::function<void(int)> aFunction);
   void resetTimerCallback();
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Global instance

#ifdef _BACKENDINTERFACETHREAD_CPP_
          InterfaceThread* gInterfaceThread;
#else
   extern InterfaceThread* gInterfaceThread;
#endif

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace
